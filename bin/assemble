#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , path = require('path')
  , fs = require('fs')
  , join = path.join
  , pkg = require('../package.json')
  , version = pkg.version
  , exists = fs.existsSync;

var boilerplates = ['site', 'h5bp', 'sitemap', 'bootstrap'];

// usage

program
  .version(version)
  .usage('[options] <dest>')
  .option('-b, --boilerplate <name>', 'Generate assemble boilerplate <name>', 'site', boilerplates)
  .option('-d, --directory <path>',  'Destination of generated boilerplate <path>');

// custom help
/*
program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    Install "boilerplate-site" to cwd');
  console.log('');
  console.log('    $ assemble');
  console.log('');
  console.log('    Install "boilerplate-site" to "myapp" directory');
  console.log('');
  console.log('    $ assemble -d myapp');
  console.log('');
  console.log('    Install "boilerplate-h5bp" to "myapp" directory');
  console.log('');
  console.log('    $ assemble -b h5bp -d myapp');
  console.log('');
});
*/
// parse argv

program.parse(process.argv);

// args void of cmd

var args = process.argv.slice(3);

/**
 * Destination path.
 */

var dest = program.args[0] || process.cwd();

/**
 * Boilerplates directory.
 */

var boilerplate = __dirname + '/../boilerplates/' + (program.boilerplate || boilerplates[0]);

/**
 * Initialize a new `Assemble Boilerplate` with the given `name`.
 *
 * @param {String} name
 * @ref https://github.com/assemble/boilerplates
 */

function Boilerplate(name) {
  this.name = name;
  this.path = name;
  this.contentPath = this.path + '/content';
  this.mod = require(this.path);
  this.values = {};
  this.directories = {};
}

/**
 * Initialize boilerplate at `dest`.
 *
 * @param {String} dest
 */

Boilerplate.prototype.init = function(pDest){
  var self = this
    , vars = this.mod.variables;

  console.log();
  program.prompt(vars, function(obj){
    self.dest = pDest + '/' + obj.project;
    self.values = obj;
    process.stdin.destroy();
    self.create();
  });
};

/**
 * Return the files for this boilerplate.
 *
 * @return {Array}
 */

Boilerplate.prototype.__defineGetter__('files', function(){
  var self = this
    , files = [];

  (function next(dir) {
    fs.readdirSync(dir).forEach(function(file){
      files.push(file = dir + '/' + file);
      var stat = fs.statSync(file);
      if (stat.isDirectory()) {
        self.directories[file] = true;
        next(file);
      }
    });
  })(this.contentPath);

  return files;
});

/**
 * Create the boilerplate files.
 */

Boilerplate.prototype.create = function(){
  var self = this;
  console.log();
  // dest

  try {
    fs.mkdirSync(self.dest, 0775);
  } catch (err) {
    // ignore
  }

  this.files.forEach(function(file){
    if (~file.indexOf('.DS_Store')) { return; }
    var path = self.parse(file)
      , out = join(self.dest, path.replace(self.contentPath, ''));

    // directory
    if (self.directories[file]) {
      try {
        fs.mkdirSync(out, 0775);
        console.log('  \033[90mcreate :\033[0m \033[36m%s\033[0m', out);
      } catch (err) {
        // ignore
      }
    // file
    } else {
      var str = self.parse(fs.readFileSync(file, 'utf8'));
      fs.writeFileSync(out, str);
      console.log('  \033[90mcreate :\033[0m \033[36m%s\033[0m', out);
    }
  });
  console.log();
};

/**
 * Parse `str`.
 *
 * @return {String}
 * @api private
 */

Boilerplate.prototype.parse = function(str){
  var self = this;
  return str
    .replace(/\{\{([^}]+)\}\}/g, function(_, key){
      return self.values[key];
    });
};

// create boilerplate

var tmpl = new Boilerplate(boilerplate);

tmpl.init(dest);
